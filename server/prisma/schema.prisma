generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  isActive  Boolean    @default(true)
  password  String
  role      UserRole   @default(USER)
  updatedAt DateTime   @updatedAt
  forms     Form[]
  responses Response[]
}

model Form {
  id                     String     @id @default(cuid())
  title                  String
  description            String?
  isPublic               Boolean    @default(true)
  createdById            String
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  allowMultipleResponses Boolean    @default(false)
  maxResponses           Int?
  createdBy              User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  questions              Question[] @relation("FormQuestions")
  logicRules             LogicRule[]
  responses              Response[]

  @@index([createdById])
}

model Question {
  id               String             @id @default(cuid())
  formId           String
  title            String
  type             QuestionType
  required         Boolean            @default(false)
  order            Int
  createdAt        DateTime           @default(now())
  maxRating        Int?
  minRating        Int?
  ratingLabels     String?
  choices          Choice[]
  conditionalLogic ConditionalLogic[]
  form             Form               @relation("FormQuestions", fields: [formId], references: [id], onDelete: Cascade)
  responseItems    ResponseItem[]

  @@index([formId, order])
}

model ConditionalLogic {
  id                  String              @id @default(cuid())
  questionId          String
  dependsOnQuestionId String
  operator            ConditionalOperator
  value               String
  showQuestion        Boolean             @default(true)
  action              ConditionalAction   @default(GO_TO)
  order               Int                 @default(0)
  targetQuestionId    String?
  question            Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId, order])
}

// New centralized logic rules
model LogicRule {
  id                    String   @id @default(cuid())
  form                  Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId                String
  type                  String   // 'VISIBILITY' or 'NAVIGATION'
  dependsOnQuestionId   String   // Question this depends on
  operator              ConditionalOperator
  value                 String   // Value to compare against
  order                 Int      @default(0) // Order of evaluation
  
  // For visibility rules
  subjectQuestionId     String?  // Question to show/hide
  showQuestion          Boolean? // true = show when condition met, false = hide when condition met
  
  // For navigation rules
  fromQuestionId        String?  // Question that triggers navigation
  action                ConditionalAction? // GO_TO, SKIP_TO, END_SURVEY
  targetQuestionId      String?  // Question to go to (for GO_TO/SKIP_TO)
  
  createdAt             DateTime @default(now())
  @@index([formId, order])
}

model Choice {
  id         String   @id @default(cuid())
  questionId String
  label      String
  value      String
  order      Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId, order])
}

model Response {
  id            String         @id @default(cuid())
  formId        String
  submittedById String?
  submittedAt   DateTime       @default(now())
  clientIp      String?
  userAgent     String?
  sessionId     String?
  totalTime     Int?
  form          Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  submittedBy   User?          @relation(fields: [submittedById], references: [id])
  items         ResponseItem[]

  @@index([formId, submittedAt])
  @@index([clientIp, formId])
  @@index([submittedById, formId])
}

model ResponseItem {
  id             String   @id @default(cuid())
  responseId     String
  questionId     String
  valueText      String?
  valueChoiceId  String?
  changedAnswers Int      @default(0)
  timeSpent      Int?
  valueRating    Int?
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  response       Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([questionId])
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  RATING
}

enum ConditionalOperator {
  EQUALS
  NOT_EQUALS
  CONTAINS
  GREATER_THAN
  LESS_THAN
}

enum ConditionalAction {
  GO_TO
  SKIP_TO
  END_SURVEY
}

enum UserRole {
  ADMIN
  USER
}
