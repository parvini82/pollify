generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  forms     Form[]
  createdAt DateTime @default(now())
}

model Form {
  id          String     @id @default(cuid())
  title       String
  description String?
  isPublic    Boolean    @default(true)
  createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  questions   Question[] @relation("FormQuestions")
  responses   Response[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  @@index([createdById])
}

model Question {
  id            String       @id @default(cuid())
  form          Form         @relation("FormQuestions", fields: [formId], references: [id], onDelete: Cascade)
  formId        String
  title         String
  type          QuestionType
  required      Boolean      @default(false)
  order         Int
  choices       Choice[]
  responseItems ResponseItem[]
  createdAt     DateTime     @default(now())
  @@index([formId, order])
}

model Choice {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  label      String
  value      String
  order      Int
  @@index([questionId, order])
}

model Response {
  id            String        @id @default(cuid())
  form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId        String
  submittedById String?
  submittedAt   DateTime @default(now())
  items         ResponseItem[]
  clientIp      String?
  userAgent     String?
  @@index([formId, submittedAt])
}

model ResponseItem {
  id            String   @id @default(cuid())
  response      Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId    String
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    String
  valueText     String?
  valueChoiceId String?
  @@index([responseId])
  @@index([questionId])
}
